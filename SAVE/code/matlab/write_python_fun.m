function out = write_python_fun(A,B,C,D,L,q_vec,r_vec,Umin,Umax,DeltaUmin,DeltaUmax,qn_vec,rn_vec,Lk,Pk,sp)
if size(q_vec,1) > size(q_vec,2)
    q_vec = q_vec';
end
if size(r_vec,1) > size(r_vec,2)
    r_vec = r_vec';
end
if size(qn_vec,1) > size(qn_vec,2)
    qn_vec = qn_vec';
end
if size(rn_vec,1) > size(rn_vec,2)
    rn_vec = rn_vec';
end
ttt = '    ';

out = ['import numpy as np;\nimport libs.mpyc as reg;\n\ndef initialize_mpc():\n'];
out = [out,...
       ttt,'# System matrices','\n',...
       ttt,'A = ',matrix2numpy(A),';\n',...
       ttt,'B = ',matrix2numpy(B),';\n',...
       ttt,'C = ',matrix2numpy(C),';\n',...
       ttt,'D = ',matrix2numpy(D),';\n'];

out = [out '\n'];

out = [out,...
       ttt,'# Control parameters','\n',...
       ttt,'L = ',sprintf('%d',L),';\n',...
       ttt,'Q = np.diag(np.tile(', matrix2numpy(q_vec) ,',[1,L]).tolist()[0])',';\n',...
       ttt,'R = np.diag(np.tile(', matrix2numpy(r_vec) ,',[1,L]).tolist()[0])',';\n'];

out = [out '\n'];

out = [out,...
       ttt,'# Control saturations','\n',...
       ttt,'Umin = ',matrix2numpy(Umin),';\n',...
       ttt,'Umax = ',matrix2numpy(Umax),';\n',...
       ttt,'DeltaUmin = ',matrix2numpy(DeltaUmin),';\n',...
       ttt,'DeltaUmax = ',matrix2numpy(DeltaUmax),';\n'];

out = [out '\n'];

out = [out,...
       ttt,'# Kalman filter matrices','\n',...
       ttt,'Qn = np.diag(', matrix2numpy(qn_vec) ,'.tolist()[0])',';\n',...
       ttt,'Rn = np.diag(', matrix2numpy(rn_vec) ,'.tolist()[0])',';\n',...
       ttt,'Lk = ',matrix2numpy(Lk),';\n',...
       ttt,'Pk = ',matrix2numpy(Pk),';\n'];

out = [out, '\n', ...
       ttt,'# Setpoint','\n',...
       ttt,'sp = ',matrix2numpy(sp),';\n'];


out = [out,...
		   ttt, '\n',...
		   ttt, '# Initializing the controller\n',...
		   ttt, 'controller = reg.MPCController(A, B, C, D, L, Q, R, Lk, Pk, Qn, Rn,	Umin, Umax, DeltaUmin, DeltaUmax,	optim = 1, fast = 0, time_varying = 1)\n'];

out = [out '\n'];

out = [out, ttt, 'return controller;\n\n'];

